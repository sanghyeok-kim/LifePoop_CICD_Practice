# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

APP_NAME = "LifePoop"
TARGET_SCHEME = "App"


platform :ios do
  lane :beta do |options|
    new_version_number = options[:new_version_number]
    set_build_info(new_version_number)

    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)
    
    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,            
    )
    
    increment_build_number(
      xcodeproj: "Projects/#{TARGET_SCHEME}/#{TARGET_SCHEME}.xcodeproj",
      # build_number: Time.new.strftime("%Y.%m%d.%H%M") # 2021년 4월 17일 14시 53분 -> 2021.0417.1453
      build_number: Time.new.strftime("%y%m%d.%H%M%S") # 년년월월일일_시시분분초초
    )
    
    match(
      type: "appstore",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )
    
    build_app(
      configuration: "Release",
      workspace: "#{APP_NAME}.xcworkspace",
      scheme: "#{TARGET_SCHEME}",
      skip_profile_detection: true, # 이거 안해주니까 export_options의 provisioningProfiles을 해줬는데도 불구하고 모든 프로파일을 맵핑함..
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          DEVELOPER_APP_IDENTIFIER => PROVISIONING_PROFILE_SPECIFIER
        }
      }
    )
    
    upload_to_testflight(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "./#{TARGET_SCHEME}.ipa"
    )
    
    delete_temp_keychain(keychain_name)
  end
end

# Keychain Functions

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

# Build & Versioning Functions

def set_build_info(new_version_number)
  set_xcconfig_value("MARKETING_VERSION", new_version_number)
end

# XCConfig Functions

def set_xcconfig_value(targetKey, targetValue, xcconfigs_file_path = "../Projects/App/xcconfigs/App.base.xcconfig")
  configs = {}
 
  # xcconfig 파일이 있는지 확인
  unless File.exist?(xcconfigs_file_path)
    UI.error("xcconfig file not found at path: #{xcconfigs_file_path}")
    return
  end

  # xcconfig 파일 내용 읽기
  File.readlines(xcconfigs_file_path).each do |line|
    key, value = line.split(" = ").map(&:strip)
    configs[key] = value if key && value
  end

  # 값 설정
  configs[targetKey] = targetValue

  # 파일에 쓰기
  File.open(xcconfigs_file_path, "w") do |file|
    configs.each { |key, value| file.puts "#{key} = #{value}" }
  end
end
